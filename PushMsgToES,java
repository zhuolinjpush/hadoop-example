package cn.jpush.iapp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.elasticsearch.action.bulk.BulkItemResponse;
import org.elasticsearch.action.bulk.BulkRequestBuilder;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.xcontent.XContentFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.jpush.utils.SystemConfig;

public class AppSimilarityRawToEs {
    
    private static Logger LOG = LoggerFactory.getLogger(AppSimilarityRawToEs.class);
    private static final String SPLIT = "|";
    private Settings settings;
    private String _esIndex = null;
    private String _esIndexType = null;
    private TransportClient client = null;
    private List<InetSocketTransportAddress> ISTAList;
    private String fileName;
    private Long itime;
    
    public AppSimilarityRawToEs(String fileName, long itime) {
        this.fileName = fileName;
        this.itime = itime;
        _esIndex = SystemConfig.getProperty("iappes.index");
        _esIndexType = SystemConfig.getProperty("iappes.indextype");
        prepareClientSetting();
        createClient();
    }

    private void prepareClientSetting() {
        this.settings = Settings.settingsBuilder()
                .put("client.transport.sniff", SystemConfig.getBooleanProperty("iappes.client.transport.sniff"))
                .put("client.transport.ping_timeout", SystemConfig.getProperty("iappes.client.transport.ping_timeout"))
                .put("client.transport.nodes_sampler_interval", SystemConfig.getProperty("iappes.client.transport.nodes_sampler_interval"))
                .put("cluster.name", SystemConfig.getProperty("iappes.cluster.name")).build();
        
        this.ISTAList = new ArrayList<InetSocketTransportAddress>();
        String ipList = SystemConfig.getProperty("iappes.transport.ip");
        String[] ips = ipList.split(";");
        for (int i = 0; i < ips.length; i++) {
            String addr[] = ips[i].split(":");
            try {
                ISTAList.add(new InetSocketTransportAddress(InetAddress.getByName(addr[0]), Integer.valueOf(addr[1])));
            } catch (Exception e) {
                LOG.error("add transport address error", e);
            }
        }
        LOG.info("prepare es setting finish");
    }
    
    private void createClient() {
        try {
            this.client = TransportClient.builder().settings(this.settings).build();
            for (int i = 0; i < ISTAList.size(); i++) {
                LOG.info(ISTAList.get(i) + "");
                client.addTransportAddress(ISTAList.get(i));
            }
        } catch (Exception e) {
            LOG.error("init transport client error", e);
        }
        LOG.info("create es client");
    }
    
    public void process() {
        File file = new File(this.fileName);
        if (!file.exists() || !file.isFile()) {
            LOG.warn("file is invalid," + this.fileName);
            return;
        }
        try {
            long count = 0;
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String imei = null;
            StringBuilder pkg = new StringBuilder();
            Map<String, String> map = new HashMap<String, String>();
            String line = null;
            while ((line = reader.readLine()) != null) {
                String[] arr = line.trim().split(" ");
                if (arr.length == 2) {
                    try {
                        if (null == imei) {//start
                            imei = arr[0].trim();
                            pkg.append(arr[1].trim()).append(SPLIT);
                            continue;
                        }
                        if (imei.equals(arr[0].trim())) {//=
                            pkg.append(arr[1].trim()).append(SPLIT);
                        } else {//!=
                            String pkgStr = pkg.toString();
                            map.put(imei, pkgStr.substring(0, pkgStr.length() - 1));
                            if (map.size() >= 3000) {
                                commit(map);
                            }
                            
                            imei = arr[0].trim();
                            pkg.delete(0, pkg.length());
                            pkg.append(arr[1].trim()).append(SPLIT);
                        }
                        
                    } catch (Exception e) {
                        LOG.error("readline error", e);
                    }
                    
                } else {
                    LOG.warn("error line," + line);
                }
                count++;
            }
            //last
            String pkgStr = pkg.toString();
            map.put(imei, pkgStr.substring(0, pkgStr.length() - 1));
            if (!map.isEmpty()) {
                commit(map);
            }
            reader.close();
            LOG.info("process finish! count=" + count);
        } catch(Exception e) {
            LOG.error("process error", e);
        } finally {
            cleanup();
        }
    }
    
    public void commit(Map<String, String> map) {
        long start = System.currentTimeMillis();
        try {
            BulkRequestBuilder brBuilder = client.prepareBulk();
            for (String imei : map.keySet()) {
                brBuilder.add(client.prepareIndex(_esIndex, _esIndexType, imei)
                        .setSource(XContentFactory.jsonBuilder()
                                .startObject()
                                    .field("pkg", map.get(imei))
                                    .field("itime", this.itime)
                                .endObject()
                        )
                );
            }
            BulkResponse response = brBuilder.get();
            if (response.hasFailures()) {
                LOG.error("Bulk has failures.:");
                //LOG.error("Bulk has failures.");
                for ( BulkItemResponse bir : response.getItems()) {
                    if (bir.isFailed()) {
                        LOG.error("BulkResponse.exception:" +  bir.getItemId());
                        LOG.error("BulkResponse.exception:" + bir.getFailureMessage());
                    }
                }
            }
            LOG.info("commit size=" + map.size() + " cost time " + (System.currentTimeMillis() - start));
            map.clear();
        } catch (Exception e) {
            LOG.error("commit es error", e);
        }
        
    }

    public void cleanup() {
        try {
            if (client != null) {
                client.close();
            }
        } catch (Exception e) {
            LOG.error("cleanup error", e);
        }
        
    }
    
    public static void main(String[] args) {
        
        AppSimilarityRawToEs toEs = new AppSimilarityRawToEs(args[0], Long.parseLong(args[1]));
        toEs.process();

    }
    
}
